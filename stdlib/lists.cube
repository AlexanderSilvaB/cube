func list.apply(fn)
{
    fn(this)
}

func apply(items, fn)
{
    var newItems = copy(items)
    fn(newItems)
    return newItems
}

func list.unique()
{
    var _unique = []
    for(var i in this)
    {
        if(i not in _unique)
            _unique.add(i)
    }
    return _unique
}

func unique(items)
{
    return items.unique()
}

func list.removeIf(fn)
{
    var _toremove = []
    for(var i in this)
    {
        if(fn(i))
            _toremove.add(i)
    }

    for(var i in _toremove)
    {
        this.remove(i)
    }

    return _toremove
}

func removeIf(items, fn)
{
    return apply(items, @(x) => x.removeIf(fn))
}

func list.max()
{
    if(len(this) == 0)
        return null
    
    var m = this[0]
    for(var i in this)
    {
        if(i > m)
            m = i
    }

    return m
}

func max(items)
{
    return items.max()
}

func list.min()
{
    if(len(this) == 0)
        return null
    
    var m = this[0]
    for(var i in this)
    {
        if(i < m)
            m = i
    }

    return m
}

func min(items)
{
    return items.min()
}

func list.each(fn)
{
    if(fn is not func)
        throw('Each parameter must be a func')
        
    for(var i in this)
    {
        fn(i)
    }
}

func each(items, fn)
{
    return apply(items, @(x) => x.each(fn))
}

func list.map(fn)
{
    if(fn is not func)
        throw('Map parameter must be a func')
    
    for(var i = 0; i < len(this); i++)
    {
        this[i] = fn(this[i])
    }
}

func map(items, fn)
{
    return apply(items, @(x) => x.map(fn))
}

func list.reduce(fn)
{
    if(fn is not func)
        throw('Reduce parameter must be a func')
    
    var result = 0
    for(var i in this)
    {
        result = fn(result, i)
    }
    return result
}

func reduce(items, fn)
{
    return items.reduce(fn)
}

func list.filter(fn)
{
    if(fn is not func)
        throw('Filter parameter must be a func')
    
    var result = []
    for(var i in this)
    {
        if(fn(i))
            result.add(i)
    }
    return result
}

func filter(items, fn)
{
    return items.filter(fn)
}