func extension(path)
{
    var parts = path.split('.');
    var ext = parts[-1];
    return ext;
}

func fileName(path)
{
    var parts = path.split('/');
    var name = parts[-1];
    return name;
}

func folder(path)
{
    var parts = path.split('/');
    var name = parts[0..-2].join('/');
    return name;
}

func back(path)
{
    if(path == '/')
        return path;
    var p;
    if(path.endsWith('/'))
        p = path.substr(0, len(path)-2);
    else
        p = path;
    if(path.startsWith('/'))
        p = p.from(1);
    var parts = p.split('/');
    var backFolder = '';
    if(path.startsWith('/'))
        backFolder = '/';
    if(len(parts) > 1)
        backFolder += parts[0..len(parts)-2].join('/');
    return backFolder;
}

func expand(p)
{
    var home = env("HOME");
    if(home is null)
        return p;

    return p.replace('~', home);
}

func changeExtension(path, ext)
{
    var e = extension(path)
    var npath = path.replace('.'+e, '.'+ext)
    return npath
}

func walk(path, container)
{
    if(container is null)
        container = []

    if(path == '')
        path = '.'
    
    var itemPath
    for ( var item in ls(path) )
    {
        if(item == '.' or item == '..')
            continue
        else
        {
            itemPath = "${path}/${item}"
            if(isdir(itemPath))
                walk(itemPath, container)
            else
                container.add(itemPath)
        }
    }
    
    return container
}

func tree(path)
{
    var container = {}   
    container['path'] = path
    container['files'] = []
    container['folders'] = []
    
    var itemPath
    for ( var item in ls(path) )
    {
        if(item == '.' or item == '..')
            continue
        else
        {
            itemPath = "${path}/${item}"
            if(isdir(itemPath))
                container['folders'].add(tree(itemPath))
            else
                container['files'].add(item)
        }
    }
    
    return container
}