native ui
{
    void ui_start();
    void ui_stop();
    num ui_create_window(str, num, num);
    void ui_destroy_window(num);
    list ui_run_cycle();
    void ui_run_forever();
    bool ui_has_quit();
    bool ui_load(num, str);
    bool ui_on_event(num, str, str);
    dict ui_get_event_args(str);
    list ui_get_property(num, str, str);
    bool ui_set_property(num, str, str, str);
    dict ui_get_obj(num, str);
    list ui_get_methods(num, str);
    str ui_get_method(num, str, str);
    list ui_call_method(num, str, str, list);
    void ui_resize_window(num, num, num);
    void ui_antialias(num, bool);
    void ui_rm_shape(num, num);
    num ui_add_shape(num, dict);
    void ui_update_shape(num, dict);
}

class UI
{
    static var windows = [];
    static var FPS = 60;

    static func start()
    {
        ui_start();
    }

    static func stop()
    {
        ui_stop();
    }

    static func forever()
    {
        var lastFPS = UI.FPS;
        var delay = int(1000 / lastFPS);

        var fps = 60;
        var startFrame = clock();
        var start = startFrame;
        var current;
        var dt;
        while(UI.running())
        {
            current = clock();
            dt = current - startFrame;
            fps = 1 / dt;
            UI.cycle(fps, dt, current - start);
            startFrame = clock();
            wait(delay);
            if(lastFPS != UI.FPS)
            {
                lastFPS = UI.FPS;
                delay = int(1000 / lastFPS);
            }
        }
        UI.stop();
    }

    static func cycle(fps, dt, T)
    {
        for(var i = 0; i < len(UI.windows); ++i)
        {
            var window = UI.windows[i];
            if(window.update is func)
            {
                window.update(window, fps, dt, T);
            }
            if(len(window.shapes) > 0)
            {
                for(var j = 0; j < len(window.shapes); ++j)
                {
                    var shape = window.shapes[j];
                    if(shape.updated)
                    {
                        ui_update_shape(window.id, shape.dict());
                        shape.updated = false;
                    }
                }
            }
        }
        var events = ui_run_cycle();
        for(var i = 0; i < len(events); ++i)
        {
            var ev = events[i];
            var parts = ev.split(':');
            var id = num(parts[0]);
            var obj = parts[1];
            var event = parts[2];
            var target = parts[3];
            for(var j = 0; j < len(UI.windows); ++j)
            {
                var window = UI.windows[j];
                if(window.id == id)
                {
                    if(isempty(target))
                        target = null;
                    var onId = '{}:{}'.format(obj, event);
                    if(window.actions.exists(onId))
                    {
                        var action = window.actions.get(onId, null);
                        var evArgs = ui_get_event_args(ev);
                        action(window, target, evArgs);
                    }
                }
            }
        }
        return true;
    }

    static func running()
    {
        return !ui_has_quit();
    }

    static func addWindow(w)
    {
        UI.windows.add(w);
    }

    static func removeWindow(w)
    {
        UI.windows.remove(w);
    }
}

class Window
{
    var id = null;
    var update = null;
    var actions = {};
    var shapes = [];

    func init(name, width, height)
    {
        if(width is null)
            width = 600;
        if(height is null)
            height = 480;
        this.id = ui_create_window(name, width, height);
        UI.addWindow(this);
    }

    func close()
    {
        ui_destroy_window(this.id);
        UI.removeWindow(this);
    }

    func load(fileName)
    {
        if(fileName is str)
            return ui_load(this.id, fileName);
        else if(fileName is Widget)
        {
            var widget = fileName
            fileName = widget.generate()
            if(fileName is null)
                return false

            if(widget.width != inf and widget.height != inf)
                this.resize(widget.width, widget.height)

            this.set(null, 'x', widget.x)
            this.set(null, 'y', widget.y)
            if(widget is Form)
                this.set(null, 'windowTitle', widget.title)

            var success = this.load(fileName)
            if(success)
                widget.register(this)
            return success
        }
        return false
    }

    func antialias(enabled)
    {
        ui_antialias(this.id, enabled);
    }

    func resize(width, height)
    {
        ui_resize_window(this. id, width, height)
    }

    func on(obj, event, action)
    {
        if(obj is null)
            obj = '';
        else if(obj is class)
        {
            obj = obj()
            if(obj is Widget)
                obj = obj.className
            else
                return false
        }
        else if(obj is Widget)
            obj = obj.name

        var onId = '{}:{}'.format(obj, event);
        this.actions[onId] = action;

        return ui_on_event(this.id, obj, event);
    }

    func onUpdate(fn)
    {
        this.update = fn;
    }

    func methods(name)
    {
        if(name is null)
            name = '';
        else if(name is null)
            return false
        else if(name is Widget)
            name = name.name
        return ui_get_methods(this.id, name);
    }

    func method(name, methodName)
    {
        if(name is null)
            name = '';
        else if(name is null)
            return false
        else if(name is Widget)
            name = name.name
        return ui_get_method(this.id, name, methodName);
    }

    func call(name, methodName, arguments)
    {
        if(name is null)
            name = '';
        else if(name is null)
            return false
        else if(name is Widget)
            name = name.name
        
        if(arguments is not list and arguments is not null)
            arguments = [arguments]
        return ui_call_method(this.id, name, methodName, arguments)
    }

    func obj(name)
    {
        if(name is null)
            name = '';
        else if(name is null)
            return false
        else if(name is Widget)
            name = name.name
        return ui_get_obj(this.id, name);
    }

    func get(obj, prop)
    {
        if(obj is null)
            obj = '';
        else if(obj is Widget)
            obj = obj.name
        else if(obj is class)
        {
            obj = obj()
            if(obj is Widget)
                obj = obj.type
            else
                return false
        }
        return ui_get_property(this.id, obj, prop);
    }

    func set(obj, prop, value)
    {
        if(obj is null)
            obj = '';
        else if(obj is Widget)
            obj = obj.name
        else if(obj is class)
        {
            obj = obj()
            if(obj is Widget)
                obj = obj.type
            else
                return false
        }
        return ui_set_property(this.id, obj, prop, value);
    }

    func clear(shape)
    {
        ui_rm_shape(this.id, shape.id);
    }

    func draw(shape)
    {
        if(shape is string)
        {
            shape = Text(shape);
        }
        var id = ui_add_shape(this.id, shape.dict());
        if(id == -1)
            return null;
        shape.id = id;
        this.shapes.add(shape);
        return shape;
    }
}