import sqlite
import mysql
import sqldatabase as default

class Column
{
    var name
    var model
    var dbtype
    var value
    var nick
    var __allow_insecure_operations
    func init(type)
    {
        this.dbtype = type
    }

    func defaultValue(value)
    {
        this.value = value
    }

    func autoIncrement(value)
    {
        if(value is null)
            value = true
        if(value)
            this.dbtype = this.dbtype | AUTO_INCREMENT
        else
            this.dbtype = this.dbtype & ~AUTO_INCREMENT
        return this
    }

    func nullable(value)
    {
        if(value is null)
            value = true
        if(value)
            this.dbtype = this.dbtype | NOT_NULL
        else
            this.dbtype = this.dbtype & ~NOT_NULL
        return this
    }

    func primaryKey(value)
    {
        if(value is null)
            value = true
        if(value)
            this.dbtype = this.dbtype | PRIMARY_KEY
        else
            this.dbtype = this.dbtype & ~PRIMARY_KEY
        return this
    }

    func foreignKey(value)
    {
        if(value is null)
            value = true
        if(value)
            this.dbtype = this.dbtype | FOREIGN_KEY
        else
            this.dbtype = this.dbtype & ~FOREIGN_KEY
        return this
    }

    func unique(value)
    {
        if(value is null)
            value = true
        if(value)
            this.dbtype = this.dbtype | UNIQUE
        else
            this.dbtype = this.dbtype & ~UNIQUE
        return this
    }

    func alias(name)
    {
        var instance = copy(this)
        instance.nick = name
        return instance
    }

    func column(useTableNames)
    {
        useTableNames ?= true
        var sql = ""
        if(useTableNames)
            sql += model._name_() + "."

        sql += name
        if(nick is not null)
            sql += " AS " + nick
        return sql
    }

    func ==(other)
    {
        return Expression(this, "==", other)
    }

    func !=(other)
    {
        return Expression(this, "!=", other)
    }

    func !(other)
    {
        return Expression(this, "!", other)
    }

    func <(other)
    {
        return Expression(this, "<", other)
    }

    func <=(other)
    {
        return Expression(this, "<=", other)
    }

    func >(other)
    {
        return Expression(this, ">", other)
    }

    func >=(other)
    {
        return Expression(this, ">=", other)
    }
}

class Expression
{
    var left = null
    var right = null
    var operator = null

    func init(left, operator, right)
    {
        this.left = left
        this.right = right
        this.operator = operator
    }

    func compile()
    {
        var sql = ""
        if(left is Column)
            sql += left.column()
        else if(left is Expression)
            sql += left.compile()
        else
            sql += str(left)

        if(operator == "==" and right is null)
            sql += " IS NULL"
        else if(operator == "!=" and right is null)
            sql += " IS NOT NULL"
        else
        {
            sql += ' ' + operator + ' '
            if(right is Column)
                sql += right.column()
            else if(right is Expression)
                sql += right.compile()
            else if(right is str)
                sql += "'" + right + "'"
            else
                sql += str(right)
        }
        

        return sql
    }
}

class Null : Column
{
    func init()
    {
        super.init(TYPE_NULL)
    }
}

class Integer : Column
{
    func init()
    {
        super.init(TYPE_INTEGER)
    }
}

class Real : Column
{
    func init()
    {
        super.init(TYPE_REAL)
    }
}

class String : Column
{
    func init()
    {
        super.init(TYPE_TEXT)
    }
}

class Text : Column
{
    func init()
    {
        super.init(TYPE_TEXT)
    }
}

class Blob : Column
{
    func init()
    {
        super.init(TYPE_BLOB)
    }
}

class Model
{
    var _tablename_ = null
    static var _nick_ = null
    func init()
    {
        
    }

    static func reset()
    {
        setField(this, '_nick_', null)
        return this
    }

    static func alias(name)
    {
        setField(this, '_nick_', name)
        return this
    }

    static func _name_()
    {
        var _nick_ = getField(this, '_nick_')
        if(_nick_ is not null)
            return _nick_
        
        var _tablename_ = getField(this, '_tablename_')
        return _tablename_
    }

    static func _declr_()
    {
        var sql = getField(this, '_tablename_')
        var _nick_ = getField(this, '_nick_')
        if(_nick_ is not null)
            sql += " AS " + _nick_
        return sql
    }
}

class Query
{
    var db = null
    var fields = null
    var isDistinct = null
    var isCount = null
    var selectFields = null
    var selectTables = null
    var selectFilters = null
    var selectJoins = null
    var selectGroupBy = null
    func init(db, fields)
    {
        this.db = db
        this.fields = fields
        this.selectFields = []
        this.selectTables = []
        this.selectFilters = []
        this.selectJoins = []
        this.selectGroupBy = []
        this.isDistinct = false
        this.isCount = false
    }

    func filter(filter)
    {
        selectFilters.add(filter)
        return this
    }

    func filterAnd(filter1, filter2)
    {
        var filter = Expression(filter1, "AND", filter2)
        selectFilters.add(filter)
        return this
    }

    func filterOr(filter1, filter2)
    {
        var filter = Expression(filter1, "OR", filter2)
        selectFilters.add(filter)
        return this
    }

    func where(filter)
    {
        selectFilters.add(filter)
        return this
    }

    func join(model, filter)
    {
        return innerJoin(model, filter)
    }

    func innerJoin(model, filter)
    {
        selectJoins.add([model, filter, "INNER"])
        return this
    }

    func leftJoin(model, filter)
    {
        selectJoins.add([model, filter, "LEFT"])
        return this
    }

    func rightJoin(model, filter)
    {
        selectJoins.add([model, filter, "RIGHT"])
        return this
    }

    func fullJoin(model, filter)
    {
        selectJoins.add([model, filter, "FULL"])
        return this
    }

    func groupBy()
    {
        this.selectGroupBy = args
        return this
    }

    func distinct()
    {
        isDistinct = true
        return this
    }

    func count()
    {
        isCount = true
        var sql = compile()
        var rc = db.query(sql)
        var data = null
        if(rc)
        {
            data = db.results()
            if(len(data) != 1)
                data = null
            else
            {
                data = data[0]
                data = data.get('count', null)
            }
        }
        resetTables()
        return data
    }

    func first()
    {
        var sql = compile()
        sql += " LIMIT 1"
        var rc = db.query(sql)
        var data = null
        if(rc)
        {
            data = db.results()
        }
        if(len(data) > 0)
            data = data[0]
        resetTables()
        return data
    }

    func scalar()
    {
        var item = first()
        if(item is not null)
        {
            item = list(item)[1]
        }
        resetTables()
        return item
    }

    func one()
    {
        var items = all()
        if(len(items) != 1)
        {
            resetTables()
            throw("Not only one row")
        }
        resetTables()
        return items[0]
    }

    func one_or_null()
    {
        var items = all()
        if(len(items) != 1)
        {
            resetTables()
            return null
        }
        resetTables()
        return items[0]
    }

    func all()
    {
        var sql = compile()
        var rc = db.query(sql)
        var data = null
        if(rc)
        {
            data = db.results()
        }
        resetTables()
        return data
    }

    func compile()
    {
        var data = extractFields(this.fields, true)

        var fields = data[0]
        var tables = data[1]
        if(isCount)
        {
            fields = ["COUNT(*) as count"]
        }

        selectFields = fields
        selectTables = tables

        var sql = "SELECT "
        if(isDistinct)
            sql += "DISTINCT "
        sql += selectedFields() + " FROM " + selectedTable()
        if (len(selectJoins) > 0)
            sql += " " + selectedJoins()
        if (len(selectFilters) > 0)
            sql += " WHERE " + selectedFilters()
        if(len(selectGroupBy) > 0)
            sql += " GROUP BY " + selectedGroupBy()

        resetTables()

        return sql
    }

    func extractFields(items, useTableNames)
    {
        var tables = []
        var fields = []
        var columns
        var value
        for(var field in items)
        {
            if(field is Column)
            {
                fields.add(field.column(useTableNames))
                if(field.model not in tables)
                {
                    tables.add(field.model)
                }
            }
            else if(field is Model)
            {
                columns = getFields(field)
                for(var column in columns)
                {
                    value = getField(field, column)
                    if(value is Column)
                    {
                        fields.add(value.column(useTableNames))
                    }
                }

                if(field not in tables)
                {
                    tables.add(field)
                }
            }
        }

        return [fields, tables]
    }

    func selectedTable()
    {
        return selectTables[0]._declr_()
    }

    func selectedFields()
    {
        return selectFields.join(', ')
    }

    func selectedFilters()
    {
        var sql = ""
        for(var filter in selectFilters)
        {
            if(len(sql) > 0)
                sql += " AND "
            sql += filter.compile()
        }
        return sql
    }

    func selectedJoins()
    {
        var sql = ""
        for(var join in selectJoins)
        {
            if(len(sql) > 0)
                sql += " "
            sql += join[2] + " JOIN "
            if (join[0] is Model)
            {
                sql += join[0]._declr_()
            }
            else
                sql += str(join[0])
            sql += " ON " + join[1].compile()
        }
        return sql
    }

    func selectedGroupBy()
    {
        var data = extractFields(this.selectGroupBy, true)
        return data[0].join(', ')
    }

    func resetTables()
    {
        for(var table in selectTables)
        {
            table.reset()
        }
    }
}

class Session
{
    var db = null
    func init(db)
    {
        this.db = db
    }

    func add(item)
    {
        var values = this._describeItem(item)
        var primaryKey = values[1]
        var addItem = true
        var where = {}
        values = values[0]
        if(primaryKey is not null)
        {
            if(values[primaryKey] is null)
            {
                values.remove(primaryKey)
            }
            else
            {
                where[primaryKey] = values[primaryKey]
                values.remove(primaryKey)
                addItem = false
            }
        }
        var res = null
        if (addItem)
        {
            res = this.db.insert(item._tablename_, values)
            if(res)
            {
                if(primaryKey is not null)
                {
                    setField(item, primaryKey, this.db.lastId())
                }
            }
        }
        else
            res = this.db.update(item._tablename_, where, values)
        
        if(!res)
        {
            println(this.db.getError())
            return null
        }
        return item

    }

    func query()
    {
        return Query(this.db, args)
    }

    func error()
    {
        return this.db.getError()
    }

    func flush()
    {
        this.db.query('flush')
    }
    
    func commit()
    {
        this.db.query('commit')
    }

    func _describeItem(item)
    {
        if(item is not Model)
            throw('${item} is not a valid model instance')

        var model = class(item)

        var fields = {}
        var primaryKey = null
        var columns = getFields(model)
        var value
        var itemValue
        for(var column in columns)
        {
            value = getField(model, column)
            if(value is Column)
            {
                itemValue = getField(item, column)
                if(itemValue is Column)
                {
                    itemValue = itemValue.value
                }
                fields[column] = itemValue

                if(value.dbtype & PRIMARY_KEY != 0)
                    primaryKey = column
            }
        }
        return [fields, primaryKey]
    }
}

class Engine
{
    var db = null
    func init(db)
    {
        this.db = db
    }

    func create(model)
    {
        if (model is list)
        {
            for(var m in model)
            {
                this.create(m)
            }
        }
        else
        {
            if(model is not Model)
                throw('${model} is not a valid model')
            var fields = this._describeModel(model)
            var name = getField(model, '_tablename_')
            setField(model, '_tablename_', name)
            var rc = this.db.create(name, fields)
        }
    }

    func session()
    {
        return Session(this.db)
    }

    func _describeModel(model)
    {
        if(model is not Model)
            throw('${model} is not a valid model')

        var fields = {}
        var columns = getFields(model)
        var value
        for(var column in columns)
        {
            value = getField(model, column)
            if(value is Column)
            {
                value.name = column
                value.model = model
                fields[column] = value.dbtype
                setField(model, column, value)
            }
        }
        return fields
    }
}

